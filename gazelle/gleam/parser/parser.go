// Code generated by pigeon; DO NOT EDIT.

package parser

import (
	"bytes"
	"errors"
	"fmt"
	"io"
	"math"
	"os"
	"sort"
	"strconv"
	"strings"
	"sync"
	"unicode"
	"unicode/utf8"
)

// -----------------------------------------------------------------------------
// ## Go Helper Code
// -----------------------------------------------------------------------------
func toSlice[T any](v any) []T {
	if v == nil {
		return nil
	}
	if s, ok := v.([]any); ok {
		res := make([]T, len(s))
		for i, item := range s {
			res[i] = item.(T)
		}
		return res
	}
	val, ok := v.(T)
	if !ok {
		panic(fmt.Sprintf("failed to convert to slice: unexpected type %T for target type %T", v, *new(T)))
	}
	return []T{val}
}

// Helper functions for parsing literals
func parseInteger(text []byte) (int64, error) {
	s := strings.ReplaceAll(string(text), "_", "")
	if len(s) > 2 {
		switch s[0:2] {
		case "0x", "0X":
			return strconv.ParseInt(s[2:], 16, 64)
		case "0o", "0O":
			return strconv.ParseInt(s[2:], 8, 64)
		case "0b", "0B":
			return strconv.ParseInt(s[2:], 2, 64)
		}
	}
	return strconv.ParseInt(s, 10, 64)
}

func parseFloat(text []byte) (float64, error) {
	s := strings.ReplaceAll(string(text), "_", "")
	return strconv.ParseFloat(s, 64)
}

func unquoteString(text []byte) (string, error) { return strconv.Unquote(string(text)) }

// -----------------------------------------------------------------------------
// ## AST Node Definitions
// -----------------------------------------------------------------------------

type Node interface{}
type Statement interface{ Node }
type Expression interface{ Node }
type Type interface{ Node }
type Pattern interface{ Node }

type SourceFile struct{ Statements []Node }
type Identifier struct{ Name string }
type Discard struct{ Name string }
type Parameter struct {
	Label, Name string
	Type        Type
}
type Function struct {
	Public             bool
	Name               string
	Parameters         []Parameter
	ReturnType         Type
	ExternalAttributes []ExternalAttribute
}
type TargetAttribute struct {
	TargetLang string
}
type Import struct {
	Module      string
	Unqualified []UnqualifiedImport
	Alias       string
	Target      *TargetAttribute
}
type ExternalAttribute struct {
	TargetLang string
	Module     string
	Function   string
}

// Represents a single item in an unqualified import list, e.g., `MyType` in `import gleam.{MyType}`.
type UnqualifiedImport struct {
	Name   string
	Alias  string
	IsType bool // Differentiates `type MyType` from `MyFunction`
}

var g = &grammar{
	rules: []*rule{
		{
			name: "SourceFile",
			pos:  position{line: 96, col: 1, offset: 2628},
			expr: &actionExpr{
				pos: position{line: 96, col: 15, offset: 2642},
				run: (*parser).callonSourceFile1,
				expr: &seqExpr{
					pos: position{line: 96, col: 15, offset: 2642},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 96, col: 15, offset: 2642},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 96, col: 17, offset: 2644},
							label: "first",
							expr: &zeroOrOneExpr{
								pos: position{line: 96, col: 23, offset: 2650},
								expr: &choiceExpr{
									pos: position{line: 96, col: 24, offset: 2651},
									alternatives: []any{
										&ruleRefExpr{
											pos:  position{line: 96, col: 24, offset: 2651},
											name: "Import",
										},
										&ruleRefExpr{
											pos:  position{line: 96, col: 33, offset: 2660},
											name: "Function",
										},
										&ruleRefExpr{
											pos:  position{line: 96, col: 44, offset: 2671},
											name: "IgnoredContent",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 96, col: 61, offset: 2688},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 96, col: 66, offset: 2693},
								expr: &seqExpr{
									pos: position{line: 96, col: 67, offset: 2694},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 96, col: 67, offset: 2694},
											name: "_",
										},
										&choiceExpr{
											pos: position{line: 96, col: 70, offset: 2697},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 96, col: 70, offset: 2697},
													name: "Import",
												},
												&ruleRefExpr{
													pos:  position{line: 96, col: 79, offset: 2706},
													name: "Function",
												},
												&ruleRefExpr{
													pos:  position{line: 96, col: 90, offset: 2717},
													name: "IgnoredContent",
												},
											},
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 96, col: 108, offset: 2735},
							name: "_",
						},
						&ruleRefExpr{
							pos:  position{line: 96, col: 110, offset: 2737},
							name: "EOF",
						},
					},
				},
			},
		},
		{
			name: "Function",
			pos:  position{line: 113, col: 1, offset: 3157},
			expr: &actionExpr{
				pos: position{line: 113, col: 13, offset: 3169},
				run: (*parser).callonFunction1,
				expr: &seqExpr{
					pos: position{line: 113, col: 13, offset: 3169},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 113, col: 13, offset: 3169},
							label: "targetAttrs1",
							expr: &zeroOrMoreExpr{
								pos: position{line: 113, col: 26, offset: 3182},
								expr: &ruleRefExpr{
									pos:  position{line: 113, col: 27, offset: 3183},
									name: "TargetAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 113, col: 45, offset: 3201},
							label: "exattrs",
							expr: &zeroOrMoreExpr{
								pos: position{line: 113, col: 53, offset: 3209},
								expr: &ruleRefExpr{
									pos:  position{line: 113, col: 54, offset: 3210},
									name: "ExternalAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 113, col: 74, offset: 3230},
							label: "targetAttrs2",
							expr: &zeroOrMoreExpr{
								pos: position{line: 113, col: 87, offset: 3243},
								expr: &ruleRefExpr{
									pos:  position{line: 113, col: 88, offset: 3244},
									name: "TargetAttribute",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 113, col: 106, offset: 3262},
							label: "pub",
							expr: &zeroOrOneExpr{
								pos: position{line: 113, col: 110, offset: 3266},
								expr: &seqExpr{
									pos: position{line: 113, col: 111, offset: 3267},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 113, col: 111, offset: 3267},
											val:        "pub",
											ignoreCase: false,
											want:       "\"pub\"",
										},
										&ruleRefExpr{
											pos:  position{line: 113, col: 117, offset: 3273},
											name: "__",
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 113, col: 122, offset: 3278},
							val:        "fn",
							ignoreCase: false,
							want:       "\"fn\"",
						},
						&ruleRefExpr{
							pos:  position{line: 113, col: 127, offset: 3283},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 113, col: 130, offset: 3286},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 113, col: 135, offset: 3291},
								name: "Name",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 113, col: 140, offset: 3296},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 113, col: 142, offset: 3298},
							label: "params",
							expr: &ruleRefExpr{
								pos:  position{line: 113, col: 149, offset: 3305},
								name: "FunctionParameters",
							},
						},
						&labeledExpr{
							pos:   position{line: 113, col: 168, offset: 3324},
							label: "returnGroup",
							expr: &zeroOrOneExpr{
								pos: position{line: 113, col: 180, offset: 3336},
								expr: &seqExpr{
									pos: position{line: 113, col: 181, offset: 3337},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 113, col: 181, offset: 3337},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 113, col: 183, offset: 3339},
											val:        "->",
											ignoreCase: false,
											want:       "\"->\"",
										},
										&ruleRefExpr{
											pos:  position{line: 113, col: 188, offset: 3344},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 113, col: 190, offset: 3346},
											name: "Type",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 113, col: 197, offset: 3353},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 113, col: 199, offset: 3355},
							label: "body",
							expr: &zeroOrOneExpr{
								pos: position{line: 113, col: 204, offset: 3360},
								expr: &ruleRefExpr{
									pos:  position{line: 113, col: 204, offset: 3360},
									name: "IgnoredBlock",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "ExternalAttribute",
			pos:  position{line: 125, col: 1, offset: 3783},
			expr: &actionExpr{
				pos: position{line: 125, col: 22, offset: 3804},
				run: (*parser).callonExternalAttribute1,
				expr: &seqExpr{
					pos: position{line: 125, col: 22, offset: 3804},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 125, col: 22, offset: 3804},
							val:        "@",
							ignoreCase: false,
							want:       "\"@\"",
						},
						&ruleRefExpr{
							pos:  position{line: 125, col: 26, offset: 3808},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 125, col: 28, offset: 3810},
							val:        "external",
							ignoreCase: false,
							want:       "\"external\"",
						},
						&ruleRefExpr{
							pos:  position{line: 125, col: 39, offset: 3821},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 125, col: 41, offset: 3823},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 125, col: 45, offset: 3827},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 125, col: 47, offset: 3829},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 125, col: 52, offset: 3834},
								name: "ExternalArgs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 125, col: 65, offset: 3847},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 125, col: 67, offset: 3849},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
						&ruleRefExpr{
							pos:  position{line: 125, col: 71, offset: 3853},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "ExternalArgs",
			pos:  position{line: 130, col: 1, offset: 3949},
			expr: &actionExpr{
				pos: position{line: 130, col: 17, offset: 3965},
				run: (*parser).callonExternalArgs1,
				expr: &seqExpr{
					pos: position{line: 130, col: 17, offset: 3965},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 130, col: 17, offset: 3965},
							label: "target",
							expr: &choiceExpr{
								pos: position{line: 130, col: 25, offset: 3973},
								alternatives: []any{
									&litMatcher{
										pos:        position{line: 130, col: 25, offset: 3973},
										val:        "erlang",
										ignoreCase: false,
										want:       "\"erlang\"",
									},
									&litMatcher{
										pos:        position{line: 130, col: 36, offset: 3984},
										val:        "javascript",
										ignoreCase: false,
										want:       "\"javascript\"",
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 130, col: 50, offset: 3998},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 130, col: 52, offset: 4000},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 130, col: 56, offset: 4004},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 130, col: 58, offset: 4006},
							label: "module",
							expr: &ruleRefExpr{
								pos:  position{line: 130, col: 65, offset: 4013},
								name: "StringArg",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 130, col: 75, offset: 4023},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 130, col: 77, offset: 4025},
							val:        ",",
							ignoreCase: false,
							want:       "\",\"",
						},
						&ruleRefExpr{
							pos:  position{line: 130, col: 81, offset: 4029},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 130, col: 83, offset: 4031},
							label: "function",
							expr: &ruleRefExpr{
								pos:  position{line: 130, col: 92, offset: 4040},
								name: "StringArg",
							},
						},
					},
				},
			},
		},
		{
			name: "StringArg",
			pos:  position{line: 138, col: 1, offset: 4232},
			expr: &actionExpr{
				pos: position{line: 138, col: 14, offset: 4245},
				run: (*parser).callonStringArg1,
				expr: &seqExpr{
					pos: position{line: 138, col: 14, offset: 4245},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 138, col: 14, offset: 4245},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 138, col: 19, offset: 4250},
							expr: &charClassMatcher{
								pos:        position{line: 138, col: 19, offset: 4250},
								val:        "[^\"]",
								chars:      []rune{'"'},
								ignoreCase: false,
								inverted:   true,
							},
						},
						&litMatcher{
							pos:        position{line: 138, col: 25, offset: 4256},
							val:        "\"",
							ignoreCase: false,
							want:       "\"\\\"\"",
						},
					},
				},
			},
		},
		{
			name: "FunctionParameters",
			pos:  position{line: 140, col: 1, offset: 4293},
			expr: &actionExpr{
				pos: position{line: 140, col: 23, offset: 4315},
				run: (*parser).callonFunctionParameters1,
				expr: &seqExpr{
					pos: position{line: 140, col: 23, offset: 4315},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 140, col: 23, offset: 4315},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 140, col: 27, offset: 4319},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 140, col: 29, offset: 4321},
							label: "first",
							expr: &zeroOrOneExpr{
								pos: position{line: 140, col: 35, offset: 4327},
								expr: &ruleRefExpr{
									pos:  position{line: 140, col: 35, offset: 4327},
									name: "FunctionParameter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 140, col: 54, offset: 4346},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 140, col: 59, offset: 4351},
								expr: &seqExpr{
									pos: position{line: 140, col: 60, offset: 4352},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 140, col: 60, offset: 4352},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 140, col: 62, offset: 4354},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&ruleRefExpr{
											pos:  position{line: 140, col: 66, offset: 4358},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 140, col: 68, offset: 4360},
											name: "FunctionParameter",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 140, col: 88, offset: 4380},
							name: "_",
						},
						&zeroOrOneExpr{
							pos: position{line: 140, col: 90, offset: 4382},
							expr: &litMatcher{
								pos:        position{line: 140, col: 90, offset: 4382},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 140, col: 95, offset: 4387},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 140, col: 97, offset: 4389},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "LambdaFunction",
			pos:  position{line: 156, col: 1, offset: 4816},
			expr: &actionExpr{
				pos: position{line: 156, col: 19, offset: 4834},
				run: (*parser).callonLambdaFunction1,
				expr: &seqExpr{
					pos: position{line: 156, col: 19, offset: 4834},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 156, col: 19, offset: 4834},
							val:        "fn",
							ignoreCase: false,
							want:       "\"fn\"",
						},
						&ruleRefExpr{
							pos:  position{line: 156, col: 24, offset: 4839},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 156, col: 26, offset: 4841},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 156, col: 30, offset: 4845},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 156, col: 32, offset: 4847},
							label: "first",
							expr: &zeroOrOneExpr{
								pos: position{line: 156, col: 38, offset: 4853},
								expr: &ruleRefExpr{
									pos:  position{line: 156, col: 38, offset: 4853},
									name: "LambdaFunctionParameter",
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 156, col: 63, offset: 4878},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 156, col: 68, offset: 4883},
								expr: &seqExpr{
									pos: position{line: 156, col: 69, offset: 4884},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 156, col: 69, offset: 4884},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 156, col: 71, offset: 4886},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&ruleRefExpr{
											pos:  position{line: 156, col: 75, offset: 4890},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 156, col: 77, offset: 4892},
											name: "LambdaFunctionParameter",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 156, col: 104, offset: 4919},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 156, col: 106, offset: 4921},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
						&labeledExpr{
							pos:   position{line: 156, col: 110, offset: 4925},
							label: "returnGroup",
							expr: &zeroOrOneExpr{
								pos: position{line: 156, col: 122, offset: 4937},
								expr: &seqExpr{
									pos: position{line: 156, col: 123, offset: 4938},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 156, col: 123, offset: 4938},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 156, col: 125, offset: 4940},
											val:        "->",
											ignoreCase: false,
											want:       "\"->\"",
										},
										&ruleRefExpr{
											pos:  position{line: 156, col: 130, offset: 4945},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 156, col: 132, offset: 4947},
											name: "LambdaFunctionParameter",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LambdaFunctionParameter",
			pos:  position{line: 159, col: 1, offset: 4997},
			expr: &actionExpr{
				pos: position{line: 159, col: 28, offset: 5024},
				run: (*parser).callonLambdaFunctionParameter1,
				expr: &labeledExpr{
					pos:   position{line: 159, col: 28, offset: 5024},
					label: "t",
					expr: &choiceExpr{
						pos: position{line: 159, col: 31, offset: 5027},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 159, col: 31, offset: 5027},
								name: "LambdaFunction",
							},
							&ruleRefExpr{
								pos:  position{line: 159, col: 48, offset: 5044},
								name: "Type",
							},
							&ruleRefExpr{
								pos:  position{line: 159, col: 55, offset: 5051},
								name: "TupleType",
							},
						},
					},
				},
			},
		},
		{
			name: "FunctionParameter",
			pos:  position{line: 161, col: 1, offset: 5081},
			expr: &actionExpr{
				pos: position{line: 161, col: 22, offset: 5102},
				run: (*parser).callonFunctionParameter1,
				expr: &seqExpr{
					pos: position{line: 161, col: 22, offset: 5102},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 161, col: 22, offset: 5102},
							label: "p",
							expr: &choiceExpr{
								pos: position{line: 161, col: 25, offset: 5105},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 161, col: 25, offset: 5105},
										name: "LabeledNameParam",
									},
									&ruleRefExpr{
										pos:  position{line: 161, col: 44, offset: 5124},
										name: "NameParam",
									},
									&ruleRefExpr{
										pos:  position{line: 161, col: 56, offset: 5136},
										name: "DiscardParam",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 161, col: 70, offset: 5150},
							label: "typ",
							expr: &zeroOrOneExpr{
								pos: position{line: 161, col: 74, offset: 5154},
								expr: &ruleRefExpr{
									pos:  position{line: 161, col: 74, offset: 5154},
									name: "TypeAnnotation",
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TypeAnnotation",
			pos:  position{line: 169, col: 1, offset: 5307},
			expr: &actionExpr{
				pos: position{line: 169, col: 19, offset: 5325},
				run: (*parser).callonTypeAnnotation1,
				expr: &seqExpr{
					pos: position{line: 169, col: 19, offset: 5325},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 169, col: 19, offset: 5325},
							val:        ":",
							ignoreCase: false,
							want:       "\":\"",
						},
						&ruleRefExpr{
							pos:  position{line: 169, col: 23, offset: 5329},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 169, col: 25, offset: 5331},
							label: "t",
							expr: &ruleRefExpr{
								pos:  position{line: 169, col: 28, offset: 5334},
								name: "TypeAnnotationContent",
							},
						},
					},
				},
			},
		},
		{
			name: "TypeAnnotationContent",
			pos:  position{line: 170, col: 1, offset: 5375},
			expr: &actionExpr{
				pos: position{line: 170, col: 26, offset: 5400},
				run: (*parser).callonTypeAnnotationContent1,
				expr: &labeledExpr{
					pos:   position{line: 170, col: 26, offset: 5400},
					label: "t",
					expr: &choiceExpr{
						pos: position{line: 170, col: 29, offset: 5403},
						alternatives: []any{
							&ruleRefExpr{
								pos:  position{line: 170, col: 29, offset: 5403},
								name: "LambdaFunction",
							},
							&ruleRefExpr{
								pos:  position{line: 170, col: 46, offset: 5420},
								name: "TupleType",
							},
							&ruleRefExpr{
								pos:  position{line: 170, col: 58, offset: 5432},
								name: "Type",
							},
						},
					},
				},
			},
		},
		{
			name: "TupleType",
			pos:  position{line: 171, col: 1, offset: 5455},
			expr: &actionExpr{
				pos: position{line: 171, col: 14, offset: 5468},
				run: (*parser).callonTupleType1,
				expr: &seqExpr{
					pos: position{line: 171, col: 14, offset: 5468},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 171, col: 14, offset: 5468},
							val:        "#(",
							ignoreCase: false,
							want:       "\"#(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 171, col: 19, offset: 5473},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 171, col: 21, offset: 5475},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 171, col: 28, offset: 5482},
								name: "TypeAnnotationContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 171, col: 51, offset: 5505},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 171, col: 56, offset: 5510},
								expr: &seqExpr{
									pos: position{line: 171, col: 57, offset: 5511},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 171, col: 57, offset: 5511},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 171, col: 59, offset: 5513},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&ruleRefExpr{
											pos:  position{line: 171, col: 63, offset: 5517},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 171, col: 65, offset: 5519},
											name: "TypeAnnotationContent",
										},
										&ruleRefExpr{
											pos:  position{line: 171, col: 87, offset: 5541},
											name: "_",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 171, col: 91, offset: 5545},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 171, col: 93, offset: 5547},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "Type",
			pos:  position{line: 172, col: 1, offset: 5571},
			expr: &actionExpr{
				pos: position{line: 172, col: 9, offset: 5579},
				run: (*parser).callonType1,
				expr: &seqExpr{
					pos: position{line: 172, col: 9, offset: 5579},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 172, col: 9, offset: 5579},
							label: "mod",
							expr: &zeroOrOneExpr{
								pos: position{line: 172, col: 13, offset: 5583},
								expr: &seqExpr{
									pos: position{line: 172, col: 14, offset: 5584},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 172, col: 14, offset: 5584},
											name: "Name",
										},
										&litMatcher{
											pos:        position{line: 172, col: 19, offset: 5589},
											val:        ".",
											ignoreCase: false,
											want:       "\".\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 172, col: 25, offset: 5595},
							label: "name",
							expr: &choiceExpr{
								pos: position{line: 172, col: 31, offset: 5601},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 172, col: 31, offset: 5601},
										name: "Name",
									},
									&ruleRefExpr{
										pos:  position{line: 172, col: 38, offset: 5608},
										name: "UpName",
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 172, col: 46, offset: 5616},
							expr: &seqExpr{
								pos: position{line: 172, col: 47, offset: 5617},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 172, col: 47, offset: 5617},
										name: "_",
									},
									&labeledExpr{
										pos:   position{line: 172, col: 49, offset: 5619},
										label: "gp",
										expr: &ruleRefExpr{
											pos:  position{line: 172, col: 52, offset: 5622},
											name: "GenericParams",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "GenericParams",
			pos:  position{line: 175, col: 1, offset: 5672},
			expr: &actionExpr{
				pos: position{line: 175, col: 18, offset: 5689},
				run: (*parser).callonGenericParams1,
				expr: &seqExpr{
					pos: position{line: 175, col: 18, offset: 5689},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 175, col: 18, offset: 5689},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 175, col: 22, offset: 5693},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 175, col: 24, offset: 5695},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 175, col: 31, offset: 5702},
								name: "TypeAnnotationContent",
							},
						},
						&labeledExpr{
							pos:   position{line: 175, col: 54, offset: 5725},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 175, col: 59, offset: 5730},
								expr: &seqExpr{
									pos: position{line: 175, col: 60, offset: 5731},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 175, col: 60, offset: 5731},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 175, col: 62, offset: 5733},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&ruleRefExpr{
											pos:  position{line: 175, col: 66, offset: 5737},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 175, col: 68, offset: 5739},
											name: "TypeAnnotationContent",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 175, col: 92, offset: 5763},
							name: "_",
						},
						&zeroOrOneExpr{
							pos: position{line: 175, col: 94, offset: 5765},
							expr: &litMatcher{
								pos:        position{line: 175, col: 94, offset: 5765},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
						&litMatcher{
							pos:        position{line: 175, col: 99, offset: 5770},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
					},
				},
			},
		},
		{
			name: "GenericParam",
			pos:  position{line: 176, col: 1, offset: 5794},
			expr: &actionExpr{
				pos: position{line: 176, col: 17, offset: 5810},
				run: (*parser).callonGenericParam1,
				expr: &seqExpr{
					pos: position{line: 176, col: 17, offset: 5810},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 176, col: 17, offset: 5810},
							label: "mod",
							expr: &zeroOrOneExpr{
								pos: position{line: 176, col: 21, offset: 5814},
								expr: &seqExpr{
									pos: position{line: 176, col: 22, offset: 5815},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 176, col: 22, offset: 5815},
											name: "Name",
										},
										&litMatcher{
											pos:        position{line: 176, col: 27, offset: 5820},
											val:        ".",
											ignoreCase: false,
											want:       "\".\"",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 176, col: 33, offset: 5826},
							label: "param",
							expr: &choiceExpr{
								pos: position{line: 176, col: 40, offset: 5833},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 176, col: 40, offset: 5833},
										name: "Name",
									},
									&ruleRefExpr{
										pos:  position{line: 176, col: 47, offset: 5840},
										name: "UpName",
									},
								},
							},
						},
						&zeroOrOneExpr{
							pos: position{line: 176, col: 55, offset: 5848},
							expr: &seqExpr{
								pos: position{line: 176, col: 56, offset: 5849},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 176, col: 56, offset: 5849},
										name: "_",
									},
									&ruleRefExpr{
										pos:  position{line: 176, col: 58, offset: 5851},
										name: "GenericParams",
									},
									&ruleRefExpr{
										pos:  position{line: 176, col: 72, offset: 5865},
										name: "_",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "LabeledNameParam",
			pos:  position{line: 177, col: 1, offset: 5889},
			expr: &actionExpr{
				pos: position{line: 177, col: 21, offset: 5909},
				run: (*parser).callonLabeledNameParam1,
				expr: &seqExpr{
					pos: position{line: 177, col: 21, offset: 5909},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 177, col: 21, offset: 5909},
							label: "label",
							expr: &ruleRefExpr{
								pos:  position{line: 177, col: 27, offset: 5915},
								name: "Label",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 177, col: 33, offset: 5921},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 177, col: 35, offset: 5923},
							label: "name",
							expr: &ruleRefExpr{
								pos:  position{line: 177, col: 40, offset: 5928},
								name: "Identifier",
							},
						},
					},
				},
			},
		},
		{
			name: "NameParam",
			pos:  position{line: 180, col: 1, offset: 6019},
			expr: &actionExpr{
				pos: position{line: 180, col: 14, offset: 6032},
				run: (*parser).callonNameParam1,
				expr: &labeledExpr{
					pos:   position{line: 180, col: 14, offset: 6032},
					label: "name",
					expr: &ruleRefExpr{
						pos:  position{line: 180, col: 19, offset: 6037},
						name: "Identifier",
					},
				},
			},
		},
		{
			name: "DiscardParam",
			pos:  position{line: 181, col: 1, offset: 6104},
			expr: &actionExpr{
				pos: position{line: 181, col: 17, offset: 6120},
				run: (*parser).callonDiscardParam1,
				expr: &labeledExpr{
					pos:   position{line: 181, col: 17, offset: 6120},
					label: "name",
					expr: &ruleRefExpr{
						pos:  position{line: 181, col: 22, offset: 6125},
						name: "Discard",
					},
				},
			},
		},
		{
			name: "Identifier",
			pos:  position{line: 182, col: 1, offset: 6180},
			expr: &actionExpr{
				pos: position{line: 182, col: 15, offset: 6194},
				run: (*parser).callonIdentifier1,
				expr: &ruleRefExpr{
					pos:  position{line: 182, col: 15, offset: 6194},
					name: "Name",
				},
			},
		},
		{
			name: "Discard",
			pos:  position{line: 183, col: 1, offset: 6248},
			expr: &actionExpr{
				pos: position{line: 183, col: 12, offset: 6259},
				run: (*parser).callonDiscard1,
				expr: &ruleRefExpr{
					pos:  position{line: 183, col: 12, offset: 6259},
					name: "DiscardName",
				},
			},
		},
		{
			name: "Label",
			pos:  position{line: 184, col: 1, offset: 6317},
			expr: &actionExpr{
				pos: position{line: 184, col: 10, offset: 6326},
				run: (*parser).callonLabel1,
				expr: &ruleRefExpr{
					pos:  position{line: 184, col: 10, offset: 6326},
					name: "Name",
				},
			},
		},
		{
			name: "IgnoredContent",
			pos:  position{line: 186, col: 1, offset: 6363},
			expr: &actionExpr{
				pos: position{line: 186, col: 19, offset: 6381},
				run: (*parser).callonIgnoredContent1,
				expr: &oneOrMoreExpr{
					pos: position{line: 186, col: 19, offset: 6381},
					expr: &seqExpr{
						pos: position{line: 186, col: 20, offset: 6382},
						exprs: []any{
							&notExpr{
								pos: position{line: 186, col: 20, offset: 6382},
								expr: &choiceExpr{
									pos: position{line: 186, col: 22, offset: 6384},
									alternatives: []any{
										&seqExpr{
											pos: position{line: 186, col: 22, offset: 6384},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 186, col: 22, offset: 6384},
													name: "TargetAttribute",
												},
												&ruleRefExpr{
													pos:  position{line: 186, col: 38, offset: 6400},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 186, col: 41, offset: 6403},
													val:        "fn",
													ignoreCase: false,
													want:       "\"fn\"",
												},
											},
										},
										&seqExpr{
											pos: position{line: 186, col: 48, offset: 6410},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 186, col: 48, offset: 6410},
													name: "TargetAttribute",
												},
												&ruleRefExpr{
													pos:  position{line: 186, col: 64, offset: 6426},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 186, col: 67, offset: 6429},
													val:        "import",
													ignoreCase: false,
													want:       "\"import\"",
												},
											},
										},
										&seqExpr{
											pos: position{line: 186, col: 78, offset: 6440},
											exprs: []any{
												&ruleRefExpr{
													pos:  position{line: 186, col: 78, offset: 6440},
													name: "TargetAttribute",
												},
												&ruleRefExpr{
													pos:  position{line: 186, col: 94, offset: 6456},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 186, col: 97, offset: 6459},
													val:        "pub",
													ignoreCase: false,
													want:       "\"pub\"",
												},
												&ruleRefExpr{
													pos:  position{line: 186, col: 103, offset: 6465},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 186, col: 106, offset: 6468},
													val:        "fn",
													ignoreCase: false,
													want:       "\"fn\"",
												},
											},
										},
										&litMatcher{
											pos:        position{line: 186, col: 113, offset: 6475},
											val:        "import",
											ignoreCase: false,
											want:       "\"import\"",
										},
										&litMatcher{
											pos:        position{line: 186, col: 124, offset: 6486},
											val:        "@external(",
											ignoreCase: false,
											want:       "\"@external(\"",
										},
										&seqExpr{
											pos: position{line: 186, col: 139, offset: 6501},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 186, col: 139, offset: 6501},
													val:        "fn",
													ignoreCase: false,
													want:       "\"fn\"",
												},
												&ruleRefExpr{
													pos:  position{line: 186, col: 144, offset: 6506},
													name: "__",
												},
											},
										},
										&seqExpr{
											pos: position{line: 186, col: 149, offset: 6511},
											exprs: []any{
												&litMatcher{
													pos:        position{line: 186, col: 149, offset: 6511},
													val:        "pub",
													ignoreCase: false,
													want:       "\"pub\"",
												},
												&ruleRefExpr{
													pos:  position{line: 186, col: 155, offset: 6517},
													name: "__",
												},
												&litMatcher{
													pos:        position{line: 186, col: 158, offset: 6520},
													val:        "fn",
													ignoreCase: false,
													want:       "\"fn\"",
												},
												&ruleRefExpr{
													pos:  position{line: 186, col: 163, offset: 6525},
													name: "__",
												},
											},
										},
									},
								},
							},
							&anyMatcher{
								line: 186, col: 169, offset: 6531,
							},
						},
					},
				},
			},
		},
		{
			name: "IgnoredBlock",
			pos:  position{line: 187, col: 1, offset: 6555},
			expr: &actionExpr{
				pos: position{line: 187, col: 17, offset: 6571},
				run: (*parser).callonIgnoredBlock1,
				expr: &seqExpr{
					pos: position{line: 187, col: 17, offset: 6571},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 187, col: 17, offset: 6571},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 187, col: 21, offset: 6575},
							expr: &choiceExpr{
								pos: position{line: 187, col: 22, offset: 6576},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 187, col: 22, offset: 6576},
										name: "IgnoredBlock",
									},
									&seqExpr{
										pos: position{line: 187, col: 37, offset: 6591},
										exprs: []any{
											&notExpr{
												pos: position{line: 187, col: 37, offset: 6591},
												expr: &litMatcher{
													pos:        position{line: 187, col: 38, offset: 6592},
													val:        "}",
													ignoreCase: false,
													want:       "\"}\"",
												},
											},
											&anyMatcher{
												line: 187, col: 42, offset: 6596,
											},
										},
									},
								},
							},
						},
						&litMatcher{
							pos:        position{line: 187, col: 46, offset: 6600},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name:        "_",
			displayName: "\"whitespace\"",
			pos:         position{line: 193, col: 1, offset: 6816},
			expr: &zeroOrMoreExpr{
				pos: position{line: 193, col: 19, offset: 6834},
				expr: &choiceExpr{
					pos: position{line: 193, col: 20, offset: 6835},
					alternatives: []any{
						&ruleRefExpr{
							pos:  position{line: 193, col: 20, offset: 6835},
							name: "Whitespace",
						},
						&ruleRefExpr{
							pos:  position{line: 193, col: 33, offset: 6848},
							name: "Comment",
						},
					},
				},
			},
		},
		{
			name:        "__",
			displayName: "\"whitespace\"",
			pos:         position{line: 194, col: 1, offset: 6858},
			expr: &oneOrMoreExpr{
				pos: position{line: 194, col: 20, offset: 6877},
				expr: &choiceExpr{
					pos: position{line: 194, col: 21, offset: 6878},
					alternatives: []any{
						&ruleRefExpr{
							pos:  position{line: 194, col: 21, offset: 6878},
							name: "Whitespace",
						},
						&ruleRefExpr{
							pos:  position{line: 194, col: 34, offset: 6891},
							name: "Comment",
						},
					},
				},
			},
		},
		{
			name: "Whitespace",
			pos:  position{line: 195, col: 1, offset: 6901},
			expr: &charClassMatcher{
				pos:        position{line: 195, col: 15, offset: 6915},
				val:        "[ \\t\\r\\n]",
				chars:      []rune{' ', '\t', '\r', '\n'},
				ignoreCase: false,
				inverted:   false,
			},
		},
		{
			name: "Comment",
			pos:  position{line: 196, col: 1, offset: 6925},
			expr: &actionExpr{
				pos: position{line: 196, col: 12, offset: 6936},
				run: (*parser).callonComment1,
				expr: &seqExpr{
					pos: position{line: 196, col: 12, offset: 6936},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 196, col: 12, offset: 6936},
							val:        "//",
							ignoreCase: false,
							want:       "\"//\"",
						},
						&zeroOrMoreExpr{
							pos: position{line: 196, col: 17, offset: 6941},
							expr: &seqExpr{
								pos: position{line: 196, col: 18, offset: 6942},
								exprs: []any{
									&notExpr{
										pos: position{line: 196, col: 18, offset: 6942},
										expr: &litMatcher{
											pos:        position{line: 196, col: 19, offset: 6943},
											val:        "\n",
											ignoreCase: false,
											want:       "\"\\n\"",
										},
									},
									&anyMatcher{
										line: 196, col: 24, offset: 6948,
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "TargetAttribute",
			pos:  position{line: 202, col: 1, offset: 7178},
			expr: &actionExpr{
				pos: position{line: 202, col: 20, offset: 7197},
				run: (*parser).callonTargetAttribute1,
				expr: &seqExpr{
					pos: position{line: 202, col: 20, offset: 7197},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 202, col: 20, offset: 7197},
							val:        "@",
							ignoreCase: false,
							want:       "\"@\"",
						},
						&ruleRefExpr{
							pos:  position{line: 202, col: 24, offset: 7201},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 202, col: 26, offset: 7203},
							val:        "target",
							ignoreCase: false,
							want:       "\"target\"",
						},
						&ruleRefExpr{
							pos:  position{line: 202, col: 35, offset: 7212},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 202, col: 37, offset: 7214},
							val:        "(",
							ignoreCase: false,
							want:       "\"(\"",
						},
						&ruleRefExpr{
							pos:  position{line: 202, col: 41, offset: 7218},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 202, col: 43, offset: 7220},
							label: "args",
							expr: &ruleRefExpr{
								pos:  position{line: 202, col: 48, offset: 7225},
								name: "TargetArgs",
							},
						},
						&ruleRefExpr{
							pos:  position{line: 202, col: 59, offset: 7236},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 202, col: 61, offset: 7238},
							val:        ")",
							ignoreCase: false,
							want:       "\")\"",
						},
						&ruleRefExpr{
							pos:  position{line: 202, col: 65, offset: 7242},
							name: "_",
						},
					},
				},
			},
		},
		{
			name: "TargetArgs",
			pos:  position{line: 206, col: 1, offset: 7267},
			expr: &actionExpr{
				pos: position{line: 206, col: 15, offset: 7281},
				run: (*parser).callonTargetArgs1,
				expr: &labeledExpr{
					pos:   position{line: 206, col: 15, offset: 7281},
					label: "target",
					expr: &choiceExpr{
						pos: position{line: 206, col: 23, offset: 7289},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 206, col: 23, offset: 7289},
								val:        "erlang",
								ignoreCase: false,
								want:       "\"erlang\"",
							},
							&litMatcher{
								pos:        position{line: 206, col: 34, offset: 7300},
								val:        "javascript",
								ignoreCase: false,
								want:       "\"javascript\"",
							},
						},
					},
				},
			},
		},
		{
			name: "Import",
			pos:  position{line: 212, col: 1, offset: 7395},
			expr: &actionExpr{
				pos: position{line: 212, col: 11, offset: 7405},
				run: (*parser).callonImport1,
				expr: &seqExpr{
					pos: position{line: 212, col: 11, offset: 7405},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 212, col: 11, offset: 7405},
							label: "targetAttribute",
							expr: &zeroOrOneExpr{
								pos: position{line: 212, col: 27, offset: 7421},
								expr: &ruleRefExpr{
									pos:  position{line: 212, col: 27, offset: 7421},
									name: "TargetAttribute",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 212, col: 44, offset: 7438},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 212, col: 46, offset: 7440},
							val:        "import",
							ignoreCase: false,
							want:       "\"import\"",
						},
						&ruleRefExpr{
							pos:  position{line: 212, col: 55, offset: 7449},
							name: "__",
						},
						&labeledExpr{
							pos:   position{line: 212, col: 58, offset: 7452},
							label: "mod",
							expr: &ruleRefExpr{
								pos:  position{line: 212, col: 62, offset: 7456},
								name: "Module",
							},
						},
						&labeledExpr{
							pos:   position{line: 212, col: 69, offset: 7463},
							label: "unqual",
							expr: &zeroOrOneExpr{
								pos: position{line: 212, col: 76, offset: 7470},
								expr: &seqExpr{
									pos: position{line: 212, col: 77, offset: 7471},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 212, col: 77, offset: 7471},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 212, col: 79, offset: 7473},
											val:        ".",
											ignoreCase: false,
											want:       "\".\"",
										},
										&ruleRefExpr{
											pos:  position{line: 212, col: 83, offset: 7477},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 212, col: 85, offset: 7479},
											name: "UnqualifiedImports",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 212, col: 106, offset: 7500},
							label: "alias",
							expr: &zeroOrOneExpr{
								pos: position{line: 212, col: 112, offset: 7506},
								expr: &seqExpr{
									pos: position{line: 212, col: 113, offset: 7507},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 212, col: 113, offset: 7507},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 212, col: 115, offset: 7509},
											val:        "as",
											ignoreCase: false,
											want:       "\"as\"",
										},
										&ruleRefExpr{
											pos:  position{line: 212, col: 120, offset: 7514},
											name: "__",
										},
										&ruleRefExpr{
											pos:  position{line: 212, col: 123, offset: 7517},
											name: "Identifier",
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Module",
			pos:  position{line: 226, col: 1, offset: 7869},
			expr: &actionExpr{
				pos: position{line: 226, col: 11, offset: 7879},
				run: (*parser).callonModule1,
				expr: &seqExpr{
					pos: position{line: 226, col: 11, offset: 7879},
					exprs: []any{
						&ruleRefExpr{
							pos:  position{line: 226, col: 11, offset: 7879},
							name: "Name",
						},
						&zeroOrMoreExpr{
							pos: position{line: 226, col: 16, offset: 7884},
							expr: &seqExpr{
								pos: position{line: 226, col: 17, offset: 7885},
								exprs: []any{
									&ruleRefExpr{
										pos:  position{line: 226, col: 17, offset: 7885},
										name: "_",
									},
									&litMatcher{
										pos:        position{line: 226, col: 19, offset: 7887},
										val:        "/",
										ignoreCase: false,
										want:       "\"/\"",
									},
									&ruleRefExpr{
										pos:  position{line: 226, col: 23, offset: 7891},
										name: "_",
									},
									&ruleRefExpr{
										pos:  position{line: 226, col: 25, offset: 7893},
										name: "Name",
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "UnqualifiedImports",
			pos:  position{line: 231, col: 1, offset: 8011},
			expr: &actionExpr{
				pos: position{line: 231, col: 23, offset: 8033},
				run: (*parser).callonUnqualifiedImports1,
				expr: &seqExpr{
					pos: position{line: 231, col: 23, offset: 8033},
					exprs: []any{
						&litMatcher{
							pos:        position{line: 231, col: 23, offset: 8033},
							val:        "{",
							ignoreCase: false,
							want:       "\"{\"",
						},
						&ruleRefExpr{
							pos:  position{line: 231, col: 27, offset: 8037},
							name: "_",
						},
						&labeledExpr{
							pos:   position{line: 231, col: 29, offset: 8039},
							label: "items",
							expr: &zeroOrOneExpr{
								pos: position{line: 231, col: 35, offset: 8045},
								expr: &ruleRefExpr{
									pos:  position{line: 231, col: 35, offset: 8045},
									name: "UnqualifiedImportList",
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 231, col: 58, offset: 8068},
							name: "_",
						},
						&litMatcher{
							pos:        position{line: 231, col: 60, offset: 8070},
							val:        "}",
							ignoreCase: false,
							want:       "\"}\"",
						},
					},
				},
			},
		},
		{
			name: "UnqualifiedImportList",
			pos:  position{line: 239, col: 1, offset: 8244},
			expr: &actionExpr{
				pos: position{line: 239, col: 26, offset: 8269},
				run: (*parser).callonUnqualifiedImportList1,
				expr: &seqExpr{
					pos: position{line: 239, col: 26, offset: 8269},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 239, col: 26, offset: 8269},
							label: "first",
							expr: &ruleRefExpr{
								pos:  position{line: 239, col: 32, offset: 8275},
								name: "UnqualifiedImport",
							},
						},
						&labeledExpr{
							pos:   position{line: 239, col: 50, offset: 8293},
							label: "rest",
							expr: &zeroOrMoreExpr{
								pos: position{line: 239, col: 55, offset: 8298},
								expr: &seqExpr{
									pos: position{line: 239, col: 56, offset: 8299},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 239, col: 56, offset: 8299},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 239, col: 58, offset: 8301},
											val:        ",",
											ignoreCase: false,
											want:       "\",\"",
										},
										&ruleRefExpr{
											pos:  position{line: 239, col: 62, offset: 8305},
											name: "_",
										},
										&ruleRefExpr{
											pos:  position{line: 239, col: 64, offset: 8307},
											name: "UnqualifiedImport",
										},
									},
								},
							},
						},
						&ruleRefExpr{
							pos:  position{line: 239, col: 84, offset: 8327},
							name: "_",
						},
						&zeroOrOneExpr{
							pos: position{line: 239, col: 86, offset: 8329},
							expr: &litMatcher{
								pos:        position{line: 239, col: 86, offset: 8329},
								val:        ",",
								ignoreCase: false,
								want:       "\",\"",
							},
						},
					},
				},
			},
		},
		{
			name: "UnqualifiedImport",
			pos:  position{line: 253, col: 1, offset: 8781},
			expr: &actionExpr{
				pos: position{line: 253, col: 22, offset: 8802},
				run: (*parser).callonUnqualifiedImport1,
				expr: &seqExpr{
					pos: position{line: 253, col: 22, offset: 8802},
					exprs: []any{
						&labeledExpr{
							pos:   position{line: 253, col: 22, offset: 8802},
							label: "itemType",
							expr: &zeroOrOneExpr{
								pos: position{line: 253, col: 31, offset: 8811},
								expr: &seqExpr{
									pos: position{line: 253, col: 32, offset: 8812},
									exprs: []any{
										&litMatcher{
											pos:        position{line: 253, col: 32, offset: 8812},
											val:        "type",
											ignoreCase: false,
											want:       "\"type\"",
										},
										&ruleRefExpr{
											pos:  position{line: 253, col: 39, offset: 8819},
											name: "__",
										},
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 253, col: 44, offset: 8824},
							label: "name",
							expr: &choiceExpr{
								pos: position{line: 253, col: 50, offset: 8830},
								alternatives: []any{
									&ruleRefExpr{
										pos:  position{line: 253, col: 50, offset: 8830},
										name: "UpName",
									},
									&ruleRefExpr{
										pos:  position{line: 253, col: 59, offset: 8839},
										name: "Name",
									},
								},
							},
						},
						&labeledExpr{
							pos:   position{line: 253, col: 65, offset: 8845},
							label: "alias",
							expr: &zeroOrOneExpr{
								pos: position{line: 253, col: 71, offset: 8851},
								expr: &seqExpr{
									pos: position{line: 253, col: 72, offset: 8852},
									exprs: []any{
										&ruleRefExpr{
											pos:  position{line: 253, col: 72, offset: 8852},
											name: "_",
										},
										&litMatcher{
											pos:        position{line: 253, col: 74, offset: 8854},
											val:        "as",
											ignoreCase: false,
											want:       "\"as\"",
										},
										&ruleRefExpr{
											pos:  position{line: 253, col: 79, offset: 8859},
											name: "__",
										},
										&choiceExpr{
											pos: position{line: 253, col: 83, offset: 8863},
											alternatives: []any{
												&ruleRefExpr{
													pos:  position{line: 253, col: 83, offset: 8863},
													name: "UpName",
												},
												&ruleRefExpr{
													pos:  position{line: 253, col: 92, offset: 8872},
													name: "Name",
												},
											},
										},
									},
								},
							},
						},
					},
				},
			},
		},
		{
			name: "Name",
			pos:  position{line: 269, col: 1, offset: 9256},
			expr: &actionExpr{
				pos: position{line: 269, col: 16, offset: 9271},
				run: (*parser).callonName1,
				expr: &seqExpr{
					pos: position{line: 269, col: 16, offset: 9271},
					exprs: []any{
						&notExpr{
							pos: position{line: 269, col: 16, offset: 9271},
							expr: &ruleRefExpr{
								pos:  position{line: 269, col: 17, offset: 9272},
								name: "KEYWORD",
							},
						},
						&charClassMatcher{
							pos:        position{line: 269, col: 25, offset: 9280},
							val:        "[a-z_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 269, col: 32, offset: 9287},
							expr: &charClassMatcher{
								pos:        position{line: 269, col: 32, offset: 9287},
								val:        "[a-z0-9_]",
								chars:      []rune{'_'},
								ranges:     []rune{'a', 'z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "UpName",
			pos:  position{line: 270, col: 1, offset: 9329},
			expr: &actionExpr{
				pos: position{line: 270, col: 16, offset: 9344},
				run: (*parser).callonUpName1,
				expr: &seqExpr{
					pos: position{line: 270, col: 16, offset: 9344},
					exprs: []any{
						&charClassMatcher{
							pos:        position{line: 270, col: 16, offset: 9344},
							val:        "[A-Z]",
							ranges:     []rune{'A', 'Z'},
							ignoreCase: false,
							inverted:   false,
						},
						&zeroOrMoreExpr{
							pos: position{line: 270, col: 22, offset: 9350},
							expr: &charClassMatcher{
								pos:        position{line: 270, col: 22, offset: 9350},
								val:        "[a-zA-Z0-9]",
								ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
								ignoreCase: false,
								inverted:   false,
							},
						},
					},
				},
			},
		},
		{
			name: "DiscardName",
			pos:  position{line: 271, col: 1, offset: 9394},
			expr: &seqExpr{
				pos: position{line: 271, col: 16, offset: 9409},
				exprs: []any{
					&litMatcher{
						pos:        position{line: 271, col: 16, offset: 9409},
						val:        "_",
						ignoreCase: false,
						want:       "\"_\"",
					},
					&zeroOrMoreExpr{
						pos: position{line: 271, col: 20, offset: 9413},
						expr: &charClassMatcher{
							pos:        position{line: 271, col: 20, offset: 9413},
							val:        "[a-z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "KEYWORD",
			pos:  position{line: 273, col: 1, offset: 9425},
			expr: &seqExpr{
				pos: position{line: 273, col: 12, offset: 9436},
				exprs: []any{
					&choiceExpr{
						pos: position{line: 273, col: 13, offset: 9437},
						alternatives: []any{
							&litMatcher{
								pos:        position{line: 273, col: 13, offset: 9437},
								val:        "as",
								ignoreCase: false,
								want:       "\"as\"",
							},
							&litMatcher{
								pos:        position{line: 273, col: 20, offset: 9444},
								val:        "case",
								ignoreCase: false,
								want:       "\"case\"",
							},
							&litMatcher{
								pos:        position{line: 273, col: 29, offset: 9453},
								val:        "const",
								ignoreCase: false,
								want:       "\"const\"",
							},
							&litMatcher{
								pos:        position{line: 273, col: 39, offset: 9463},
								val:        "if",
								ignoreCase: false,
								want:       "\"if\"",
							},
							&litMatcher{
								pos:        position{line: 273, col: 46, offset: 9470},
								val:        "import",
								ignoreCase: false,
								want:       "\"import\"",
							},
							&litMatcher{
								pos:        position{line: 273, col: 57, offset: 9481},
								val:        "let",
								ignoreCase: false,
								want:       "\"let\"",
							},
							&litMatcher{
								pos:        position{line: 273, col: 65, offset: 9489},
								val:        "pub",
								ignoreCase: false,
								want:       "\"pub\"",
							},
							&litMatcher{
								pos:        position{line: 273, col: 73, offset: 9497},
								val:        "type",
								ignoreCase: false,
								want:       "\"type\"",
							},
							&litMatcher{
								pos:        position{line: 273, col: 82, offset: 9506},
								val:        "use",
								ignoreCase: false,
								want:       "\"use\"",
							},
						},
					},
					&notExpr{
						pos: position{line: 273, col: 89, offset: 9513},
						expr: &charClassMatcher{
							pos:        position{line: 273, col: 91, offset: 9515},
							val:        "[a-zA-Z0-9_]",
							chars:      []rune{'_'},
							ranges:     []rune{'a', 'z', 'A', 'Z', '0', '9'},
							ignoreCase: false,
							inverted:   false,
						},
					},
				},
			},
		},
		{
			name: "EOF",
			pos:  position{line: 274, col: 1, offset: 9529},
			expr: &notExpr{
				pos: position{line: 274, col: 12, offset: 9540},
				expr: &anyMatcher{
					line: 274, col: 13, offset: 9541,
				},
			},
		},
	},
}

func (c *current) onSourceFile1(first, rest any) (any, error) {
	if first == nil {
		return SourceFile{Statements: []Node{}}, nil
	}
	validStatements := []Node{first}
	if rest != nil {
		for _, s := range rest.([]any) {
			if s != nil {
				if val, ok := s.([]any); ok && val[1] != nil {
					validStatements = append(validStatements, val[1].(Node))
				}
			}
		}
	}
	return SourceFile{Statements: validStatements}, nil
}

func (p *parser) callonSourceFile1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onSourceFile1(stack["first"], stack["rest"])
}

func (c *current) onFunction1(targetAttrs1, exattrs, targetAttrs2, pub, name, params, returnGroup, body any) (any, error) {
	f := Function{Name: name.(string)}
	if pub != nil {
		f.Public = true
	}
	if params != nil {
		f.Parameters = params.([]Parameter)
	}
	if returnGroup != nil {
		f.ReturnType = returnGroup.([]any)[3].(Type)
	}
	if exattrs != nil {
		f.ExternalAttributes = toSlice[ExternalAttribute](exattrs)
	}
	return f, nil
}

func (p *parser) callonFunction1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunction1(stack["targetAttrs1"], stack["exattrs"], stack["targetAttrs2"], stack["pub"], stack["name"], stack["params"], stack["returnGroup"], stack["body"])
}

func (c *current) onExternalAttribute1(args any) (any, error) {
	return args, nil
}

func (p *parser) callonExternalAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalAttribute1(stack["args"])
}

func (c *current) onExternalArgs1(target, module, function any) (any, error) {
	return ExternalAttribute{
		TargetLang: string(target.([]uint8)),
		Module:     strings.Trim(module.(string), "\""),
		Function:   strings.Trim(function.(string), "\""),
	}, nil
}

func (p *parser) callonExternalArgs1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onExternalArgs1(stack["target"], stack["module"], stack["function"])
}

func (c *current) onStringArg1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonStringArg1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onStringArg1()
}

func (c *current) onFunctionParameters1(first, rest any) (any, error) {
	if first == nil {
		return []Parameter{}, nil
	}
	// Start the list with the first item. The type assertion is safe here.
	params := []Parameter{first.(Parameter)}

	// If there are more items, loop through them.
	if rest != nil {
		for _, paramPhrase := range toSlice[[]any](rest) {
			params = append(params, paramPhrase[3].(Parameter))
		}
	}
	return params, nil
}

func (p *parser) callonFunctionParameters1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionParameters1(stack["first"], stack["rest"])
}

func (c *current) onLambdaFunction1(first, rest, returnGroup any) (any, error) {
	return nil, nil
}

func (p *parser) callonLambdaFunction1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLambdaFunction1(stack["first"], stack["rest"], stack["returnGroup"])
}

func (c *current) onLambdaFunctionParameter1(t any) (any, error) {
	return t, nil
}

func (p *parser) callonLambdaFunctionParameter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLambdaFunctionParameter1(stack["t"])
}

func (c *current) onFunctionParameter1(p, typ any) (any, error) {
	param, ok := p.(Parameter)
	if !ok {
		return nil, nil
	}
	if typ != nil {
		param.Type = typ.(Type)
	}
	return param, nil
}

func (p *parser) callonFunctionParameter1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onFunctionParameter1(stack["p"], stack["typ"])
}

func (c *current) onTypeAnnotation1(t any) (any, error) {
	return t, nil
}

func (p *parser) callonTypeAnnotation1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeAnnotation1(stack["t"])
}

func (c *current) onTypeAnnotationContent1(t any) (any, error) {
	return t, nil
}

func (p *parser) callonTypeAnnotationContent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTypeAnnotationContent1(stack["t"])
}

func (c *current) onTupleType1(first, rest any) (any, error) {
	return nil, nil
}

func (p *parser) callonTupleType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTupleType1(stack["first"], stack["rest"])
}

func (c *current) onType1(mod, name any) (any, error) {
	return name.(string), nil
}

func (p *parser) callonType1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onType1(stack["mod"], stack["name"])
}

func (c *current) onGenericParams1(first, rest any) (any, error) {
	return nil, nil
}

func (p *parser) callonGenericParams1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericParams1(stack["first"], stack["rest"])
}

func (c *current) onGenericParam1(mod, param any) (any, error) {
	return nil, nil
}

func (p *parser) callonGenericParam1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onGenericParam1(stack["mod"], stack["param"])
}

func (c *current) onLabeledNameParam1(label, name any) (any, error) {
	return Parameter{Label: label.(string), Name: name.(Identifier).Name}, nil
}

func (p *parser) callonLabeledNameParam1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabeledNameParam1(stack["label"], stack["name"])
}

func (c *current) onNameParam1(name any) (any, error) {
	return Parameter{Name: name.(Identifier).Name}, nil
}

func (p *parser) callonNameParam1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onNameParam1(stack["name"])
}

func (c *current) onDiscardParam1(name any) (any, error) {
	return Parameter{Name: name.(string)}, nil
}

func (p *parser) callonDiscardParam1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDiscardParam1(stack["name"])
}

func (c *current) onIdentifier1() (any, error) {
	return Identifier{Name: string(c.text)}, nil
}

func (p *parser) callonIdentifier1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIdentifier1()
}

func (c *current) onDiscard1() (any, error) {
	return Discard{Name: string(c.text)}, nil
}

func (p *parser) callonDiscard1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onDiscard1()
}

func (c *current) onLabel1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonLabel1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onLabel1()
}

func (c *current) onIgnoredContent1() (any, error) {
	return nil, nil
}

func (p *parser) callonIgnoredContent1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIgnoredContent1()
}

func (c *current) onIgnoredBlock1() (any, error) {
	return nil, nil
}

func (p *parser) callonIgnoredBlock1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onIgnoredBlock1()
}

func (c *current) onComment1() (any, error) {
	return nil, nil
}

func (p *parser) callonComment1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onComment1()
}

func (c *current) onTargetAttribute1(args any) (any, error) {
	return args, nil
}

func (p *parser) callonTargetAttribute1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTargetAttribute1(stack["args"])
}

func (c *current) onTargetArgs1(target any) (any, error) {
	return &TargetAttribute{
		TargetLang: string(target.([]uint8)),
	}, nil
}

func (p *parser) callonTargetArgs1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onTargetArgs1(stack["target"])
}

func (c *current) onImport1(targetAttribute, mod, unqual, alias any) (any, error) {
	imp := Import{Module: mod.(string)}
	if alias != nil {
		imp.Alias = alias.([]any)[3].(Identifier).Name
	}
	if unqual != nil {
		imp.Unqualified = unqual.([]any)[3].([]UnqualifiedImport)
	}
	if target, ok := targetAttribute.(*TargetAttribute); ok {
		imp.Target = target
	}
	return imp, nil
}

func (p *parser) callonImport1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onImport1(stack["targetAttribute"], stack["mod"], stack["unqual"], stack["alias"])
}

func (c *current) onModule1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonModule1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onModule1()
}

func (c *current) onUnqualifiedImports1(items any) (any, error) {
	if items == nil {
		return []UnqualifiedImport{}, nil
	}
	return items, nil
}

func (p *parser) callonUnqualifiedImports1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnqualifiedImports1(stack["items"])
}

func (c *current) onUnqualifiedImportList1(first, rest any) (any, error) {
	// Start the list with the first item. The type assertion is safe here.
	imports := []UnqualifiedImport{first.(UnqualifiedImport)}

	// If there are more items, loop through them.
	if rest != nil {
		for _, pair := range toSlice[[]any](rest) {
			// Extract the UnqualifiedImport, which is the 4th element.
			imports = append(imports, pair[3].(UnqualifiedImport))
		}
	}
	return imports, nil
}

func (p *parser) callonUnqualifiedImportList1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnqualifiedImportList1(stack["first"], stack["rest"])
}

func (c *current) onUnqualifiedImport1(itemType, name, alias any) (any, error) {
	imp := UnqualifiedImport{Name: name.(string)}
	if itemType != nil {
		imp.IsType = true
	}
	if alias != nil {
		imp.Alias = alias.([]any)[3].(string)
	}
	return imp, nil
}

func (p *parser) callonUnqualifiedImport1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUnqualifiedImport1(stack["itemType"], stack["name"], stack["alias"])
}

func (c *current) onName1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onName1()
}

func (c *current) onUpName1() (any, error) {
	return string(c.text), nil
}

func (p *parser) callonUpName1() (any, error) {
	stack := p.vstack[len(p.vstack)-1]
	_ = stack
	return p.cur.onUpName1()
}

var (
	// errNoRule is returned when the grammar to parse has no rule.
	errNoRule = errors.New("grammar has no rule")

	// errInvalidEntrypoint is returned when the specified entrypoint rule
	// does not exit.
	errInvalidEntrypoint = errors.New("invalid entrypoint")

	// errInvalidEncoding is returned when the source is not properly
	// utf8-encoded.
	errInvalidEncoding = errors.New("invalid encoding")

	// errMaxExprCnt is used to signal that the maximum number of
	// expressions have been parsed.
	errMaxExprCnt = errors.New("max number of expressions parsed")
)

// Option is a function that can set an option on the parser. It returns
// the previous setting as an Option.
type Option func(*parser) Option

// MaxExpressions creates an Option to stop parsing after the provided
// number of expressions have been parsed, if the value is 0 then the parser will
// parse for as many steps as needed (possibly an infinite number).
//
// The default for maxExprCnt is 0.
func MaxExpressions(maxExprCnt uint64) Option {
	return func(p *parser) Option {
		oldMaxExprCnt := p.maxExprCnt
		p.maxExprCnt = maxExprCnt
		return MaxExpressions(oldMaxExprCnt)
	}
}

// Entrypoint creates an Option to set the rule name to use as entrypoint.
// The rule name must have been specified in the -alternate-entrypoints
// if generating the parser with the -optimize-grammar flag, otherwise
// it may have been optimized out. Passing an empty string sets the
// entrypoint to the first rule in the grammar.
//
// The default is to start parsing at the first rule in the grammar.
func Entrypoint(ruleName string) Option {
	return func(p *parser) Option {
		oldEntrypoint := p.entrypoint
		p.entrypoint = ruleName
		if ruleName == "" {
			p.entrypoint = g.rules[0].name
		}
		return Entrypoint(oldEntrypoint)
	}
}

// Statistics adds a user provided Stats struct to the parser to allow
// the user to process the results after the parsing has finished.
// Also the key for the "no match" counter is set.
//
// Example usage:
//
//	input := "input"
//	stats := Stats{}
//	_, err := Parse("input-file", []byte(input), Statistics(&stats, "no match"))
//	if err != nil {
//	    log.Panicln(err)
//	}
//	b, err := json.MarshalIndent(stats.ChoiceAltCnt, "", "  ")
//	if err != nil {
//	    log.Panicln(err)
//	}
//	fmt.Println(string(b))
func Statistics(stats *Stats, choiceNoMatch string) Option {
	return func(p *parser) Option {
		oldStats := p.Stats
		p.Stats = stats
		oldChoiceNoMatch := p.choiceNoMatch
		p.choiceNoMatch = choiceNoMatch
		if p.Stats.ChoiceAltCnt == nil {
			p.Stats.ChoiceAltCnt = make(map[string]map[string]int)
		}
		return Statistics(oldStats, oldChoiceNoMatch)
	}
}

// Debug creates an Option to set the debug flag to b. When set to true,
// debugging information is printed to stdout while parsing.
//
// The default is false.
func Debug(b bool) Option {
	return func(p *parser) Option {
		old := p.debug
		p.debug = b
		return Debug(old)
	}
}

// Memoize creates an Option to set the memoize flag to b. When set to true,
// the parser will cache all results so each expression is evaluated only
// once. This guarantees linear parsing time even for pathological cases,
// at the expense of more memory and slower times for typical cases.
//
// The default is false.
func Memoize(b bool) Option {
	return func(p *parser) Option {
		old := p.memoize
		p.memoize = b
		return Memoize(old)
	}
}

// AllowInvalidUTF8 creates an Option to allow invalid UTF-8 bytes.
// Every invalid UTF-8 byte is treated as a utf8.RuneError (U+FFFD)
// by character class matchers and is matched by the any matcher.
// The returned matched value, c.text and c.offset are NOT affected.
//
// The default is false.
func AllowInvalidUTF8(b bool) Option {
	return func(p *parser) Option {
		old := p.allowInvalidUTF8
		p.allowInvalidUTF8 = b
		return AllowInvalidUTF8(old)
	}
}

// Recover creates an Option to set the recover flag to b. When set to
// true, this causes the parser to recover from panics and convert it
// to an error. Setting it to false can be useful while debugging to
// access the full stack trace.
//
// The default is true.
func Recover(b bool) Option {
	return func(p *parser) Option {
		old := p.recover
		p.recover = b
		return Recover(old)
	}
}

// GlobalStore creates an Option to set a key to a certain value in
// the globalStore.
func GlobalStore(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.globalStore[key]
		p.cur.globalStore[key] = value
		return GlobalStore(key, old)
	}
}

// InitState creates an Option to set a key to a certain value in
// the global "state" store.
func InitState(key string, value any) Option {
	return func(p *parser) Option {
		old := p.cur.state[key]
		p.cur.state[key] = value
		return InitState(key, old)
	}
}

// ParseFile parses the file identified by filename.
func ParseFile(filename string, opts ...Option) (i any, err error) {
	f, err := os.Open(filename)
	if err != nil {
		return nil, err
	}
	defer func() {
		if closeErr := f.Close(); closeErr != nil {
			err = closeErr
		}
	}()
	return ParseReader(filename, f, opts...)
}

// ParseReader parses the data from r using filename as information in the
// error messages.
func ParseReader(filename string, r io.Reader, opts ...Option) (any, error) {
	b, err := io.ReadAll(r)
	if err != nil {
		return nil, err
	}

	return Parse(filename, b, opts...)
}

// Parse parses the data from b using filename as information in the
// error messages.
func Parse(filename string, b []byte, opts ...Option) (any, error) {
	return newParser(filename, b, opts...).parse(g)
}

// position records a position in the text.
type position struct {
	line, col, offset int
}

func (p position) String() string {
	return strconv.Itoa(p.line) + ":" + strconv.Itoa(p.col) + " [" + strconv.Itoa(p.offset) + "]"
}

// savepoint stores all state required to go back to this point in the
// parser.
type savepoint struct {
	position
	rn rune
	w  int
}

type current struct {
	pos  position // start position of the match
	text []byte   // raw text of the match

	// state is a store for arbitrary key,value pairs that the user wants to be
	// tied to the backtracking of the parser.
	// This is always rolled back if a parsing rule fails.
	state storeDict

	// globalStore is a general store for the user to store arbitrary key-value
	// pairs that they need to manage and that they do not want tied to the
	// backtracking of the parser. This is only modified by the user and never
	// rolled back by the parser. It is always up to the user to keep this in a
	// consistent state.
	globalStore storeDict
}

type storeDict map[string]any

// the AST types...

type grammar struct {
	pos   position
	rules []*rule
}

type rule struct {
	pos         position
	name        string
	displayName string
	expr        any
}

type choiceExpr struct {
	pos          position
	alternatives []any
}

type actionExpr struct {
	pos  position
	expr any
	run  func(*parser) (any, error)
}

type recoveryExpr struct {
	pos          position
	expr         any
	recoverExpr  any
	failureLabel []string
}

type seqExpr struct {
	pos   position
	exprs []any
}

type throwExpr struct {
	pos   position
	label string
}

type labeledExpr struct {
	pos   position
	label string
	expr  any
}

type expr struct {
	pos  position
	expr any
}

type (
	andExpr        expr
	notExpr        expr
	zeroOrOneExpr  expr
	zeroOrMoreExpr expr
	oneOrMoreExpr  expr
)

type ruleRefExpr struct {
	pos  position
	name string
}

type stateCodeExpr struct {
	pos position
	run func(*parser) error
}

type andCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type notCodeExpr struct {
	pos position
	run func(*parser) (bool, error)
}

type litMatcher struct {
	pos        position
	val        string
	ignoreCase bool
	want       string
}

type charClassMatcher struct {
	pos             position
	val             string
	basicLatinChars [128]bool
	chars           []rune
	ranges          []rune
	classes         []*unicode.RangeTable
	ignoreCase      bool
	inverted        bool
}

type anyMatcher position

// errList cumulates the errors found by the parser.
type errList []error

func (e *errList) add(err error) {
	*e = append(*e, err)
}

func (e errList) err() error {
	if len(e) == 0 {
		return nil
	}
	e.dedupe()
	return e
}

func (e *errList) dedupe() {
	var cleaned []error
	set := make(map[string]bool)
	for _, err := range *e {
		if msg := err.Error(); !set[msg] {
			set[msg] = true
			cleaned = append(cleaned, err)
		}
	}
	*e = cleaned
}

func (e errList) Error() string {
	switch len(e) {
	case 0:
		return ""
	case 1:
		return e[0].Error()
	default:
		var buf bytes.Buffer

		for i, err := range e {
			if i > 0 {
				buf.WriteRune('\n')
			}
			buf.WriteString(err.Error())
		}
		return buf.String()
	}
}

// parserError wraps an error with a prefix indicating the rule in which
// the error occurred. The original error is stored in the Inner field.
type parserError struct {
	Inner    error
	pos      position
	prefix   string
	expected []string
}

// Error returns the error message.
func (p *parserError) Error() string {
	return p.prefix + ": " + p.Inner.Error()
}

// newParser creates a parser with the specified input source and options.
func newParser(filename string, b []byte, opts ...Option) *parser {
	stats := Stats{
		ChoiceAltCnt: make(map[string]map[string]int),
	}

	p := &parser{
		filename: filename,
		errs:     new(errList),
		data:     b,
		pt:       savepoint{position: position{line: 1}},
		recover:  true,
		cur: current{
			state:       make(storeDict),
			globalStore: make(storeDict),
		},
		maxFailPos:      position{col: 1, line: 1},
		maxFailExpected: make([]string, 0, 20),
		Stats:           &stats,
		// start rule is rule [0] unless an alternate entrypoint is specified
		entrypoint: g.rules[0].name,
	}
	p.setOptions(opts)

	if p.maxExprCnt == 0 {
		p.maxExprCnt = math.MaxUint64
	}

	return p
}

// setOptions applies the options to the parser.
func (p *parser) setOptions(opts []Option) {
	for _, opt := range opts {
		opt(p)
	}
}

type resultTuple struct {
	v   any
	b   bool
	end savepoint
}

const choiceNoMatch = -1

// Stats stores some statistics, gathered during parsing
type Stats struct {
	// ExprCnt counts the number of expressions processed during parsing
	// This value is compared to the maximum number of expressions allowed
	// (set by the MaxExpressions option).
	ExprCnt uint64

	// ChoiceAltCnt is used to count for each ordered choice expression,
	// which alternative is used how may times.
	// These numbers allow to optimize the order of the ordered choice expression
	// to increase the performance of the parser
	//
	// The outer key of ChoiceAltCnt is composed of the name of the rule as well
	// as the line and the column of the ordered choice.
	// The inner key of ChoiceAltCnt is the number (one-based) of the matching alternative.
	// For each alternative the number of matches are counted. If an ordered choice does not
	// match, a special counter is incremented. The name of this counter is set with
	// the parser option Statistics.
	// For an alternative to be included in ChoiceAltCnt, it has to match at least once.
	ChoiceAltCnt map[string]map[string]int
}

type parser struct {
	filename string
	pt       savepoint
	cur      current

	data []byte
	errs *errList

	depth   int
	recover bool
	debug   bool

	memoize bool
	// memoization table for the packrat algorithm:
	// map[offset in source] map[expression or rule] {value, match}
	memo map[int]map[any]resultTuple

	// rules table, maps the rule identifier to the rule node
	rules map[string]*rule
	// variables stack, map of label to value
	vstack []map[string]any
	// rule stack, allows identification of the current rule in errors
	rstack []*rule

	// parse fail
	maxFailPos            position
	maxFailExpected       []string
	maxFailInvertExpected bool

	// max number of expressions to be parsed
	maxExprCnt uint64
	// entrypoint for the parser
	entrypoint string

	allowInvalidUTF8 bool

	*Stats

	choiceNoMatch string
	// recovery expression stack, keeps track of the currently available recovery expression, these are traversed in reverse
	recoveryStack []map[string]any
}

// push a variable set on the vstack.
func (p *parser) pushV() {
	if cap(p.vstack) == len(p.vstack) {
		// create new empty slot in the stack
		p.vstack = append(p.vstack, nil)
	} else {
		// slice to 1 more
		p.vstack = p.vstack[:len(p.vstack)+1]
	}

	// get the last args set
	m := p.vstack[len(p.vstack)-1]
	if m != nil && len(m) == 0 {
		// empty map, all good
		return
	}

	m = make(map[string]any)
	p.vstack[len(p.vstack)-1] = m
}

// pop a variable set from the vstack.
func (p *parser) popV() {
	// if the map is not empty, clear it
	m := p.vstack[len(p.vstack)-1]
	if len(m) > 0 {
		// GC that map
		p.vstack[len(p.vstack)-1] = nil
	}
	p.vstack = p.vstack[:len(p.vstack)-1]
}

// push a recovery expression with its labels to the recoveryStack
func (p *parser) pushRecovery(labels []string, expr any) {
	if cap(p.recoveryStack) == len(p.recoveryStack) {
		// create new empty slot in the stack
		p.recoveryStack = append(p.recoveryStack, nil)
	} else {
		// slice to 1 more
		p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)+1]
	}

	m := make(map[string]any, len(labels))
	for _, fl := range labels {
		m[fl] = expr
	}
	p.recoveryStack[len(p.recoveryStack)-1] = m
}

// pop a recovery expression from the recoveryStack
func (p *parser) popRecovery() {
	// GC that map
	p.recoveryStack[len(p.recoveryStack)-1] = nil

	p.recoveryStack = p.recoveryStack[:len(p.recoveryStack)-1]
}

func (p *parser) print(prefix, s string) string {
	if !p.debug {
		return s
	}

	fmt.Printf("%s %d:%d:%d: %s [%#U]\n",
		prefix, p.pt.line, p.pt.col, p.pt.offset, s, p.pt.rn)
	return s
}

func (p *parser) printIndent(mark string, s string) string {
	return p.print(strings.Repeat(" ", p.depth)+mark, s)
}

func (p *parser) in(s string) string {
	res := p.printIndent(">", s)
	p.depth++
	return res
}

func (p *parser) out(s string) string {
	p.depth--
	return p.printIndent("<", s)
}

func (p *parser) addErr(err error) {
	p.addErrAt(err, p.pt.position, []string{})
}

func (p *parser) addErrAt(err error, pos position, expected []string) {
	var buf bytes.Buffer
	if p.filename != "" {
		buf.WriteString(p.filename)
	}
	if buf.Len() > 0 {
		buf.WriteString(":")
	}
	buf.WriteString(fmt.Sprintf("%d:%d (%d)", pos.line, pos.col, pos.offset))
	if len(p.rstack) > 0 {
		if buf.Len() > 0 {
			buf.WriteString(": ")
		}
		rule := p.rstack[len(p.rstack)-1]
		if rule.displayName != "" {
			buf.WriteString("rule " + rule.displayName)
		} else {
			buf.WriteString("rule " + rule.name)
		}
	}
	pe := &parserError{Inner: err, pos: pos, prefix: buf.String(), expected: expected}
	p.errs.add(pe)
}

func (p *parser) failAt(fail bool, pos position, want string) {
	// process fail if parsing fails and not inverted or parsing succeeds and invert is set
	if fail == p.maxFailInvertExpected {
		if pos.offset < p.maxFailPos.offset {
			return
		}

		if pos.offset > p.maxFailPos.offset {
			p.maxFailPos = pos
			p.maxFailExpected = p.maxFailExpected[:0]
		}

		if p.maxFailInvertExpected {
			want = "!" + want
		}
		p.maxFailExpected = append(p.maxFailExpected, want)
	}
}

// read advances the parser to the next rune.
func (p *parser) read() {
	p.pt.offset += p.pt.w
	rn, n := utf8.DecodeRune(p.data[p.pt.offset:])
	p.pt.rn = rn
	p.pt.w = n
	p.pt.col++
	if rn == '\n' {
		p.pt.line++
		p.pt.col = 0
	}

	if rn == utf8.RuneError && n == 1 { // see utf8.DecodeRune
		if !p.allowInvalidUTF8 {
			p.addErr(errInvalidEncoding)
		}
	}
}

// restore parser position to the savepoint pt.
func (p *parser) restore(pt savepoint) {
	if p.debug {
		defer p.out(p.in("restore"))
	}
	if pt.offset == p.pt.offset {
		return
	}
	p.pt = pt
}

// Cloner is implemented by any value that has a Clone method, which returns a
// copy of the value. This is mainly used for types which are not passed by
// value (e.g map, slice, chan) or structs that contain such types.
//
// This is used in conjunction with the global state feature to create proper
// copies of the state to allow the parser to properly restore the state in
// the case of backtracking.
type Cloner interface {
	Clone() any
}

var statePool = &sync.Pool{
	New: func() any { return make(storeDict) },
}

func (sd storeDict) Discard() {
	for k := range sd {
		delete(sd, k)
	}
	statePool.Put(sd)
}

// clone and return parser current state.
func (p *parser) cloneState() storeDict {
	if p.debug {
		defer p.out(p.in("cloneState"))
	}

	state := statePool.Get().(storeDict)
	for k, v := range p.cur.state {
		if c, ok := v.(Cloner); ok {
			state[k] = c.Clone()
		} else {
			state[k] = v
		}
	}
	return state
}

// restore parser current state to the state storeDict.
// every restoreState should applied only one time for every cloned state
func (p *parser) restoreState(state storeDict) {
	if p.debug {
		defer p.out(p.in("restoreState"))
	}
	p.cur.state.Discard()
	p.cur.state = state
}

// get the slice of bytes from the savepoint start to the current position.
func (p *parser) sliceFrom(start savepoint) []byte {
	return p.data[start.position.offset:p.pt.position.offset]
}

func (p *parser) getMemoized(node any) (resultTuple, bool) {
	if len(p.memo) == 0 {
		return resultTuple{}, false
	}
	m := p.memo[p.pt.offset]
	if len(m) == 0 {
		return resultTuple{}, false
	}
	res, ok := m[node]
	return res, ok
}

func (p *parser) setMemoized(pt savepoint, node any, tuple resultTuple) {
	if p.memo == nil {
		p.memo = make(map[int]map[any]resultTuple)
	}
	m := p.memo[pt.offset]
	if m == nil {
		m = make(map[any]resultTuple)
		p.memo[pt.offset] = m
	}
	m[node] = tuple
}

func (p *parser) buildRulesTable(g *grammar) {
	p.rules = make(map[string]*rule, len(g.rules))
	for _, r := range g.rules {
		p.rules[r.name] = r
	}
}

func (p *parser) parse(g *grammar) (val any, err error) {
	if len(g.rules) == 0 {
		p.addErr(errNoRule)
		return nil, p.errs.err()
	}

	// TODO : not super critical but this could be generated
	p.buildRulesTable(g)

	if p.recover {
		// panic can be used in action code to stop parsing immediately
		// and return the panic as an error.
		defer func() {
			if e := recover(); e != nil {
				if p.debug {
					defer p.out(p.in("panic handler"))
				}
				val = nil
				switch e := e.(type) {
				case error:
					p.addErr(e)
				default:
					p.addErr(fmt.Errorf("%v", e))
				}
				err = p.errs.err()
			}
		}()
	}

	startRule, ok := p.rules[p.entrypoint]
	if !ok {
		p.addErr(errInvalidEntrypoint)
		return nil, p.errs.err()
	}

	p.read() // advance to first rune
	val, ok = p.parseRuleWrap(startRule)
	if !ok {
		if len(*p.errs) == 0 {
			// If parsing fails, but no errors have been recorded, the expected values
			// for the farthest parser position are returned as error.
			maxFailExpectedMap := make(map[string]struct{}, len(p.maxFailExpected))
			for _, v := range p.maxFailExpected {
				maxFailExpectedMap[v] = struct{}{}
			}
			expected := make([]string, 0, len(maxFailExpectedMap))
			eof := false
			if _, ok := maxFailExpectedMap["!."]; ok {
				delete(maxFailExpectedMap, "!.")
				eof = true
			}
			for k := range maxFailExpectedMap {
				expected = append(expected, k)
			}
			sort.Strings(expected)
			if eof {
				expected = append(expected, "EOF")
			}
			p.addErrAt(errors.New("no match found, expected: "+listJoin(expected, ", ", "or")), p.maxFailPos, expected)
		}

		return nil, p.errs.err()
	}
	return val, p.errs.err()
}

func listJoin(list []string, sep string, lastSep string) string {
	switch len(list) {
	case 0:
		return ""
	case 1:
		return list[0]
	default:
		return strings.Join(list[:len(list)-1], sep) + " " + lastSep + " " + list[len(list)-1]
	}
}

func (p *parser) parseRuleMemoize(rule *rule) (any, bool) {
	res, ok := p.getMemoized(rule)
	if ok {
		p.restore(res.end)
		return res.v, res.b
	}

	startMark := p.pt
	val, ok := p.parseRule(rule)
	p.setMemoized(startMark, rule, resultTuple{val, ok, p.pt})

	return val, ok
}

func (p *parser) parseRuleWrap(rule *rule) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRule " + rule.name))
	}
	var (
		val       any
		ok        bool
		startMark = p.pt
	)

	if p.memoize {
		val, ok = p.parseRuleMemoize(rule)
	} else {
		val, ok = p.parseRule(rule)
	}

	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(startMark)))
	}
	return val, ok
}

func (p *parser) parseRule(rule *rule) (any, bool) {
	p.rstack = append(p.rstack, rule)
	p.pushV()
	val, ok := p.parseExprWrap(rule.expr)
	p.popV()
	p.rstack = p.rstack[:len(p.rstack)-1]
	return val, ok
}

func (p *parser) parseExprWrap(expr any) (any, bool) {
	var pt savepoint

	if p.memoize {
		res, ok := p.getMemoized(expr)
		if ok {
			p.restore(res.end)
			return res.v, res.b
		}
		pt = p.pt
	}

	val, ok := p.parseExpr(expr)

	if p.memoize {
		p.setMemoized(pt, expr, resultTuple{val, ok, p.pt})
	}
	return val, ok
}

func (p *parser) parseExpr(expr any) (any, bool) {
	p.ExprCnt++
	if p.ExprCnt > p.maxExprCnt {
		panic(errMaxExprCnt)
	}

	var val any
	var ok bool
	switch expr := expr.(type) {
	case *actionExpr:
		val, ok = p.parseActionExpr(expr)
	case *andCodeExpr:
		val, ok = p.parseAndCodeExpr(expr)
	case *andExpr:
		val, ok = p.parseAndExpr(expr)
	case *anyMatcher:
		val, ok = p.parseAnyMatcher(expr)
	case *charClassMatcher:
		val, ok = p.parseCharClassMatcher(expr)
	case *choiceExpr:
		val, ok = p.parseChoiceExpr(expr)
	case *labeledExpr:
		val, ok = p.parseLabeledExpr(expr)
	case *litMatcher:
		val, ok = p.parseLitMatcher(expr)
	case *notCodeExpr:
		val, ok = p.parseNotCodeExpr(expr)
	case *notExpr:
		val, ok = p.parseNotExpr(expr)
	case *oneOrMoreExpr:
		val, ok = p.parseOneOrMoreExpr(expr)
	case *recoveryExpr:
		val, ok = p.parseRecoveryExpr(expr)
	case *ruleRefExpr:
		val, ok = p.parseRuleRefExpr(expr)
	case *seqExpr:
		val, ok = p.parseSeqExpr(expr)
	case *stateCodeExpr:
		val, ok = p.parseStateCodeExpr(expr)
	case *throwExpr:
		val, ok = p.parseThrowExpr(expr)
	case *zeroOrMoreExpr:
		val, ok = p.parseZeroOrMoreExpr(expr)
	case *zeroOrOneExpr:
		val, ok = p.parseZeroOrOneExpr(expr)
	default:
		panic(fmt.Sprintf("unknown expression type %T", expr))
	}
	return val, ok
}

func (p *parser) parseActionExpr(act *actionExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseActionExpr"))
	}

	start := p.pt
	val, ok := p.parseExprWrap(act.expr)
	if ok {
		p.cur.pos = start.position
		p.cur.text = p.sliceFrom(start)
		state := p.cloneState()
		actVal, err := act.run(p)
		if err != nil {
			p.addErrAt(err, start.position, []string{})
		}
		p.restoreState(state)

		val = actVal
	}
	if ok && p.debug {
		p.printIndent("MATCH", string(p.sliceFrom(start)))
	}
	return val, ok
}

func (p *parser) parseAndCodeExpr(and *andCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndCodeExpr"))
	}

	state := p.cloneState()

	ok, err := and.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, ok
}

func (p *parser) parseAndExpr(and *andExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAndExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	_, ok := p.parseExprWrap(and.expr)
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, ok
}

func (p *parser) parseAnyMatcher(any *anyMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseAnyMatcher"))
	}

	if p.pt.rn == utf8.RuneError && p.pt.w == 0 {
		// EOF - see utf8.DecodeRune
		p.failAt(false, p.pt.position, ".")
		return nil, false
	}
	start := p.pt
	p.read()
	p.failAt(true, start.position, ".")
	return p.sliceFrom(start), true
}

func (p *parser) parseCharClassMatcher(chr *charClassMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseCharClassMatcher"))
	}

	cur := p.pt.rn
	start := p.pt

	// can't match EOF
	if cur == utf8.RuneError && p.pt.w == 0 { // see utf8.DecodeRune
		p.failAt(false, start.position, chr.val)
		return nil, false
	}

	if chr.ignoreCase {
		cur = unicode.ToLower(cur)
	}

	// try to match in the list of available chars
	for _, rn := range chr.chars {
		if rn == cur {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of ranges
	for i := 0; i < len(chr.ranges); i += 2 {
		if cur >= chr.ranges[i] && cur <= chr.ranges[i+1] {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	// try to match in the list of Unicode classes
	for _, cl := range chr.classes {
		if unicode.Is(cl, cur) {
			if chr.inverted {
				p.failAt(false, start.position, chr.val)
				return nil, false
			}
			p.read()
			p.failAt(true, start.position, chr.val)
			return p.sliceFrom(start), true
		}
	}

	if chr.inverted {
		p.read()
		p.failAt(true, start.position, chr.val)
		return p.sliceFrom(start), true
	}
	p.failAt(false, start.position, chr.val)
	return nil, false
}

func (p *parser) incChoiceAltCnt(ch *choiceExpr, altI int) {
	choiceIdent := fmt.Sprintf("%s %d:%d", p.rstack[len(p.rstack)-1].name, ch.pos.line, ch.pos.col)
	m := p.ChoiceAltCnt[choiceIdent]
	if m == nil {
		m = make(map[string]int)
		p.ChoiceAltCnt[choiceIdent] = m
	}
	// We increment altI by 1, so the keys do not start at 0
	alt := strconv.Itoa(altI + 1)
	if altI == choiceNoMatch {
		alt = p.choiceNoMatch
	}
	m[alt]++
}

func (p *parser) parseChoiceExpr(ch *choiceExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseChoiceExpr"))
	}

	for altI, alt := range ch.alternatives {
		// dummy assignment to prevent compile error if optimized
		_ = altI

		state := p.cloneState()

		p.pushV()
		val, ok := p.parseExprWrap(alt)
		p.popV()
		if ok {
			p.incChoiceAltCnt(ch, altI)
			return val, ok
		}
		p.restoreState(state)
	}
	p.incChoiceAltCnt(ch, choiceNoMatch)
	return nil, false
}

func (p *parser) parseLabeledExpr(lab *labeledExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLabeledExpr"))
	}

	p.pushV()
	val, ok := p.parseExprWrap(lab.expr)
	p.popV()
	if ok && lab.label != "" {
		m := p.vstack[len(p.vstack)-1]
		m[lab.label] = val
	}
	return val, ok
}

func (p *parser) parseLitMatcher(lit *litMatcher) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseLitMatcher"))
	}

	start := p.pt
	for _, want := range lit.val {
		cur := p.pt.rn
		if lit.ignoreCase {
			cur = unicode.ToLower(cur)
		}
		if cur != want {
			p.failAt(false, start.position, lit.want)
			p.restore(start)
			return nil, false
		}
		p.read()
	}
	p.failAt(true, start.position, lit.want)
	return p.sliceFrom(start), true
}

func (p *parser) parseNotCodeExpr(not *notCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotCodeExpr"))
	}

	state := p.cloneState()

	ok, err := not.run(p)
	if err != nil {
		p.addErr(err)
	}
	p.restoreState(state)

	return nil, !ok
}

func (p *parser) parseNotExpr(not *notExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseNotExpr"))
	}

	pt := p.pt
	state := p.cloneState()
	p.pushV()
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	_, ok := p.parseExprWrap(not.expr)
	p.maxFailInvertExpected = !p.maxFailInvertExpected
	p.popV()
	p.restoreState(state)
	p.restore(pt)

	return nil, !ok
}

func (p *parser) parseOneOrMoreExpr(expr *oneOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseOneOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			if len(vals) == 0 {
				// did not match once, no match
				return nil, false
			}
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseRecoveryExpr(recover *recoveryExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRecoveryExpr (" + strings.Join(recover.failureLabel, ",") + ")"))
	}

	p.pushRecovery(recover.failureLabel, recover.recoverExpr)
	val, ok := p.parseExprWrap(recover.expr)
	p.popRecovery()

	return val, ok
}

func (p *parser) parseRuleRefExpr(ref *ruleRefExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseRuleRefExpr " + ref.name))
	}

	if ref.name == "" {
		panic(fmt.Sprintf("%s: invalid rule: missing name", ref.pos))
	}

	rule := p.rules[ref.name]
	if rule == nil {
		p.addErr(fmt.Errorf("undefined rule: %s", ref.name))
		return nil, false
	}
	return p.parseRuleWrap(rule)
}

func (p *parser) parseSeqExpr(seq *seqExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseSeqExpr"))
	}

	vals := make([]any, 0, len(seq.exprs))

	pt := p.pt
	state := p.cloneState()
	for _, expr := range seq.exprs {
		val, ok := p.parseExprWrap(expr)
		if !ok {
			p.restoreState(state)
			p.restore(pt)
			return nil, false
		}
		vals = append(vals, val)
	}
	return vals, true
}

func (p *parser) parseStateCodeExpr(state *stateCodeExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseStateCodeExpr"))
	}

	err := state.run(p)
	if err != nil {
		p.addErr(err)
	}
	return nil, true
}

func (p *parser) parseThrowExpr(expr *throwExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseThrowExpr"))
	}

	for i := len(p.recoveryStack) - 1; i >= 0; i-- {
		if recoverExpr, ok := p.recoveryStack[i][expr.label]; ok {
			if val, ok := p.parseExprWrap(recoverExpr); ok {
				return val, ok
			}
		}
	}

	return nil, false
}

func (p *parser) parseZeroOrMoreExpr(expr *zeroOrMoreExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrMoreExpr"))
	}

	var vals []any

	for {
		p.pushV()
		val, ok := p.parseExprWrap(expr.expr)
		p.popV()
		if !ok {
			return vals, true
		}
		vals = append(vals, val)
	}
}

func (p *parser) parseZeroOrOneExpr(expr *zeroOrOneExpr) (any, bool) {
	if p.debug {
		defer p.out(p.in("parseZeroOrOneExpr"))
	}

	p.pushV()
	val, _ := p.parseExprWrap(expr.expr)
	p.popV()
	// whether it matched or not, consider it a match
	return val, true
}
