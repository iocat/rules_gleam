load("//gleam_tools:coded_versions.bzl", "VERSIONS")
load("//gleam_tools:platforms.bzl", "PLATFORMS")

def _gleam_toolchain_repository_impl(repository_ctx):
    version = repository_ctx.attr.version
    platform = repository_ctx.attr.platform

    integrity = VERSIONS[version]["platforms"][platform]
    url_template = VERSIONS[version]["download_url_template"]
    url = url_template.format(
        version = version,
        platform = platform,
    )

    # This will extract a binary file at root.
    repository_ctx.download_and_extract(
        url = url,
        sha256 = integrity.replace('sha256:', ''),
        stripPrefix = "",
    )
    exe = "gleam"
    if repository_ctx.os.name.startswith("windows"):
        exe = "gleam.exe"

    build_content = """# Generated by repositories.bzl
load("@rules_gleam//gleam_tools:toolchain.bzl", "gleam_toolchain")

exports_files(["{EXE}"])

gleam_toolchain (
    name = "gleam_toolchain",
    compiler = ":{EXE}",
)
    """
    repository_ctx.file("BUILD.bazel", build_content.format(EXE = exe))

# Use this to enumerate associated targets
gleam_toolchain_repository = repository_rule(
    _gleam_toolchain_repository_impl,
    doc = "Generate a repository that contains tooling for a particular tool chain, platform",
    attrs = {
        "version": attr.string(mandatory = True, values = VERSIONS.keys()),
        "platform": attr.string(mandatory = True, values = PLATFORMS.keys()),
    },
)

def _toolchains_repositories_impl(repository_ctx):
    build_content = """# Generated by repositories.bzl
"""

    for [platform, meta] in PLATFORMS.items():
        build_content += """
toolchain(
    name = "{platform}_toolchain",
    exec_compatible_with = {compatible_with},
    toolchain = "@{prefix}{platform}//:gleam_toolchain",
    toolchain_type = "@rules_gleam//gleam_tools:toolchain_type",
)
""".format(
            platform = platform.replace("-", "_"),
            compatible_with = meta.compatible_with,
            prefix = repository_ctx.attr.toolchain_repo_prefix,
        )

    # Base BUILD file for this repository
    repository_ctx.file("BUILD", build_content)

toolchains_repositories = repository_rule(
    _toolchains_repositories_impl,
    doc = """Creates a repository with toolchain definitions for all known platforms
     which can be registered or selected.""",
    attrs = {
        "toolchain_repo_prefix": attr.string(doc = "The prefix to used for generating tool chain repos."),
    },
)

def register_toolchains(version = "v1.12.0"):
    prefix = "gleam_compiler_"
    for platform in PLATFORMS.keys():
        gleam_toolchain_repository(
            # This name is referenced by toolchains_repositories, so careful.
            name = prefix + platform.replace("-", "_"),
            platform = platform,
            version = version,
        )
    toolchains_repositories(
        name = "gleam_toolchains",
        toolchain_repo_prefix = prefix,
    )
