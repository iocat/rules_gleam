// This file is generated by rules_gleam. DO NOT EDIT.
//
// Similar to glee_unit
import gleam/list
import gleam/string

pub fn main() {
  let result =
    [{MODULES_UNDER_TEST}]
    |> list.map(fn(path) { path |> string.replace("/", "@") })
    |> list.map(dangerously_convert_string_to_atom(_, Utf8))
    |> run_eunit({TIMEOUT_SECS}, [
      Verbose, NoTty,
      Report(#(GleamGleeunitProgressFfi, [Colored(True)]))
    ])

  let code = case result {
    Ok(_) -> 0
    Error(_) -> 1
  }
  halt(code)
}

type ReportModuleName {
  GleamGleeunitProgressFfi
}

type GleamGleeunitProgressFfiOption {
  Colored(Bool)
}

type EunitOption {
  Verbose
  NoTty
  Report(#(ReportModuleName, List(GleamGleeunitProgressFfiOption)))
}

@external(erlang, "erlang", "halt")
fn halt(a: Int) -> Nil

@external(erlang, "{TEST_MODULE}@@main", "run_eunit")
fn run_eunit(a: List(Atom), timeout_sec: Int, b: List(EunitOption)) -> Result(Nil, a)

type Atom

type Encoding {
  Utf8
}

@external(erlang, "erlang", "binary_to_atom")
fn dangerously_convert_string_to_atom(a: String, b: Encoding) -> Atom
